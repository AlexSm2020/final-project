{"version":3,"sources":["logo.svg","components/conditional.js","components/landingpage.js","components/about.js","components/contact.js","components/logIn.js","components/register.js","components/SearchModal.js","components/SearchResultCard.js","components/SavedSearchDataList.js","components/SavedSearchOption.js","components/Search.js","components/formPages/JobDetails_1.js","components/formPages/JobDetails_2.js","components/formPages/JobDetails_3.js","components/formPages/AllInfo.js","components/userForm.js","components/applications.js","components/phoneInput.js","components/modalBody.js","components/modal.js","components/singleApplication.js","components/auth.js","components/privateRoute.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Conditional","props","if","children","Landing","className","id","src","alt","to","Button","React","Component","About","href","MyForm","submitForm","bind","state","status","this","onSubmit","action","method","type","name","ev","preventDefault","form","target","data","FormData","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","DONE","reset","setState","send","LogIn","resetUserInputs","username","password","redirectTo","handleInputChange","event","value","handleFormSubmit","payload","axios","post","then","response","console","log","redirect","window","location","catch","error","onChange","placeholder","onClick","Register","firstName","lastName","email","redirecTo","err","SearchModal","useState","modal","setModal","toggle","modalId","color","modalButtonColor","modalButtonText","Modal","centered","isOpen","ModalHeader","modalHeader","ModalFooter","searchObject","query","radius","jobType","getSavedSearches","modalConfirm","applicationObject","jobTitle","jobtitle","jobLocation","formattedLocationFull","jobCompany","company","jobAdURL","url","application","push","pathname","SearchResultCard","snippet","date","SavedSearchDataList","SavedSearchOption","search","Search","handleChange","get","res","searches","loadSearch","find","savedSearch","submitSearch","results","Form","autoComplete","inline","FormGroup","Label","for","Input","aria-describedby","list","undefined","map","key","modalCancel","result","jobkey","JobDetails_1","continue","e","nextStep","percent","accomplished","index","JobDetails_2","back","prevStep","interest","LastComm","LastCommDate","defaultValue","bsSize","JobDetails_3","notes","poc","pocEmail","pocPhone","defaultCountry","AllInfo","submit","appPayload","title","lastComm","lastCommDate","Axios","message","StepForm","step","input","showStep","Applications","applications","ListGroup","ListGroupItem","ListGroupItemHeading","ListGroupItemText","PhoneInputComponent","setValue","ModalBodyContent","renderBodyType","modalType","validate","pattern","Dropdown","dropDownOpen","toggleDropDown","DropdownToggle","caret","currentInterest","DropdownMenu","DropdownItem","changeDropDownValue","Row","Col","modalNotes","taskTitle","taskDescription","lastCommType","lastCommDescription","dropDownValue","ModalExample","buttonLabel","modalTitle","toggleCancel","resetState","storeState","ModalBody","taskID","editInfo","editInterest","editNotes","editTask","editComm","editContact","addTask","SingleApplication","tasks","steps","onClickNext","onClickBack","deleteTask","currentStep","newStep","body","put","_id","localStorage","setItem","JSON","stringify","savedState","parse","getItem","currentTarget","textContent","dueDate","description","editTaskTitle","forEach","task","editTaskDueDate","editTaskDescription","applicationId","delete","pass","alert","taskDueDate","appID","Jumbotron","fluid","Container","activeStep","xs","Card","CardBody","CardText","class","Auth","getAuth","getValue","a","isAuth","PrivateRoute","loading","isAuthenticated","component","rest","render","Main","exact","path","loggedIn","LandingPage","Contact","UserForm","App","updateUser","userObject","logout","style","textDecoration","scroll","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8e78abbe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","const Conditional = (props) => {\n    return (\n        !!props.if && props.children\n    );\n}\n\nexport default Conditional;","import React from 'react';\nimport { Button } from 'reactstrap';\nimport { Link } from 'react-router-dom'\n\nclass Landing extends React.Component {\n\n  render() {\n\n    return (\n      <div className=\"container\" id=\"landing-container\">\n          <h1>DreamJob.</h1>\n          <h2>Job Search Platform</h2>\n          <img src=\"logo.svg\" id=\"landing-logo\" alt=\"logo\"></img>\n          <h3>Your Career Upgrade Starts Here.</h3>\n          <Link to=\"/register\"><Button>Register</Button></Link>\n          <Link to=\"/login\">Already a member? Click to log in.</Link>\n      </div>\n    );\n  }\n}\n\n\nexport default Landing;","import React, { Component } from 'react';\n\n\n\nclass About extends Component {\n  render() {\n    return (\n      <div className=\"aboutUsPage\">\n        <h1>Team Members:</h1>\n        \n        <p> Andrew Murphy   <a className=\"ref-aboutUs1\" href=\"https://www.linkedin.com/in/b-andrew-murphy/\"> click here for reach out to me</a></p>\n        <p> Aref Smiley   <a className=\"ref-aboutUs2\" href=\"https://www.linkedin.com/in/aref-smiley-61941757/\"> click here for reach out to me</a></p>\n        <p> John Rademaker   <a className=\"ref-aboutUs3\" href=\"https://www.linkedin.com/in/rademakerjohn1/\"> click here for reach out to me</a></p>\n        <p> Sedat Atakan   <a className=\"ref-aboutUs4\" href=\"https://www.linkedin.com/in/sedat-atakan/\"> click here for reach out to me</a></p>\n        \n      </div>\n    )\n  }\n}\n\nexport default About;\n\n\n\n","// import React, { Component } from 'react';\n\n\n\n// class Contact extends Component {\n//   render() {\n//     return (\n//       <div>\n//         <h1>Contact Page</h1>\n//       </div>\n//     )\n//   }\n// }\n\n// export default Contact;\n\n\n\nimport React, { Component } from \"react\";\n\nexport default class MyForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.submitForm = this.submitForm.bind(this);\n    this.state = {\n      status: \"\"\n    };\n  }\n\n  render() {\n    const { status } = this.state;\n    return (\n      <form className=\"contact-us\"\n        onSubmit={this.submitForm}\n        action=\"https://formspree.io/xoqkypno\"\n        method=\"POST\"\n      >\n        <h3>Please get in touch!</h3>\n        {/* <!-- add your custom form HTML here --> */}\n        <label>Email:</label>\n        <input className=\"contact-Email\" type=\"email\" name=\"email\" />\n        <label>Message:</label>\n        <input className=\"msg-Email\" type=\"text\" name=\"message\" />\n        {status === \"SUCCESS\" ? <p>Thanks!</p> : <button className=\"submit-contactUs\">Submit</button>}\n        {status === \"ERROR\" && <p>Ooops! There was an error.</p>}\n      </form>\n    );\n  }\n\n  submitForm(ev) {\n    ev.preventDefault();\n    const form = ev.target;\n    const data = new FormData(form);\n    const xhr = new XMLHttpRequest();\n    xhr.open(form.method, form.action);\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState !== XMLHttpRequest.DONE) return;\n      if (xhr.status === 200) {\n        form.reset();\n        this.setState({ status: \"SUCCESS\" });\n      } else {\n        this.setState({ status: \"ERROR\" });\n      }\n    };\n    xhr.send(data);\n  }\n}\n\n","import React, { Component } from 'react';\nimport axios from \"axios\";\nimport logo from \"../logo.svg\"\n\nclass LogIn extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      username: \"\",\n      password: \"\",\n      redirectTo: \"\"\n    }\n    this.resetUserInputs = this.resetUserInputs.bind(this)\n    this.handleInputChange = this.handleInputChange.bind(this)\n    this.handleFormSubmit = this.handleFormSubmit.bind(this)\n  }\n\nresetUserInputs = () => {\n  this.setState({\n    username: \"\",\n    password: \"\",\n    redirectTo: \"\"\n  });\n};\n\nhandleInputChange = event => {\n  // Getting the value and name of the input which triggered the change\n  const { name, value } = event.target;\n\n  // Updating the input's state\n  this.setState({\n    [name]: value\n  });\n};\n\nhandleFormSubmit = event => {\n  event.preventDefault()\n\n  const payload = {\n    username: this.state.username,\n    password: this.state.password\n  }\n\n  axios\n    .post(\"/user/login\", payload)\n    .then(response => {\n      console.log(\"login response: \")\n      console.log(response)\n      if (response.status=== 200) {\n        console.log(\"200\")\n\n        if (response.data.redirect === \"/\") {\n          window.location = \"/\"\n        }\n        else if (response.data.redirect === \"/login\") {\n          window.location = \"/login\"\n        }\n      }\n    })\n    .catch(error => {\n      console.log(\"login error \")\n      console.log(error);\n      window.location = \"/login\"\n    })\n\n}\n\nrender() {\n    return (\n      <div className=\"container h-100\">\n        <div className=\"d-flex justify-content-center h-100\">\n          <div className=\"user_card_login\">\n            <div className=\"d-flex justify-content-center\">\n              <div className=\"brand_logo_container_login\">\n                <img src=\"globe-logo.svg\" className=\"brand_logo_login\" alt=\"logo\"></img>\n              </div>\n            </div>\n            <div className=\"d-flex justify-content-center form_container_login\">\n              <form className=\"login\">\n                <div className=\"input-group mb-3\">\n                  <div className=\"input-group-append\">\n                    <span className=\"input-group-text\"><i className=\"fas fa-user\"></i></span>\n                  </div>\n                  <input \n                  value={this.state.username}\n                  name=\"username\"\n                  onChange={this.handleInputChange}\n                  type=\"text\" \n                  className=\"form-control input_user_login\"\n                  placeholder=\"username\"\n                  >  \n                  </input>\n                </div>\n                <div className=\"input-group mb-2\">\n                  <div className=\"input-group-append\">\n                    <span className=\"input-group-text\"><i className=\"fas fa-key\"></i></span>\n                  </div>\n                  <input\n                    value={this.state.password}\n                    name=\"password\"\n                    onChange={this.handleInputChange}\n                    type=\"password\"\n                    className=\"form-control input_pass_login\"\n                    placeholder=\"password\"\n                  >\n                  </input>\n                </div>\n                <div className=\"d-flex justify-content-center mt-3 login_container\">\n                  <button onClick={this.handleFormSubmit} className=\"btn login_btn\">Login</button>\n                </div>\n              </form>\n              \n            </div>\n            <div className=\"mt-4\">\n              <div className=\"d-flex justify-content-center links\">\n                Don't have an account? <a href=\"/register\" className=\"ml-2\">Sign Up</a>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n      </div>\n    )\n  }\n}\n\nexport default LogIn;","import React, { Component } from 'react';\n// import { Grid, Cell } from 'react-mdl';\nimport logo from \"../logo.svg\"\nimport axios from 'axios';\n\nclass Register extends Component {\n\n  // Using constructor to build out Register component class which will be exported to app.js for rendering.\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      redirectTo: \"\"\n    }\n    // Binding functions to class in ordere to be able to use functions in JSX below.\n    this.resetUserInputs = this.resetUserInputs.bind(this)\n    this.handleInputChange = this.handleInputChange.bind(this)\n    this.handleFormSubmit = this.handleFormSubmit.bind(this)\n  }\n\n  // Function designed to set state inputs back to empty after submitting form.\n\n  resetUserInputs = () => {\n    this.setState({\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      redirecTo: \"\"\n    });\n  };\n\n  // Function to edit state values upon input change\n  handleInputChange = event => {\n    // Getting the value and name of the input which triggered the change\n    const { name, value } = event.target;\n\n    // Updating the input's state\n    this.setState({\n      [name]: value\n    });\n  };\n\n  // This function will take in the inputs and submit the registration form to our database to store the user. \n  handleFormSubmit = event => {\n    event.preventDefault()\n\n    const payload = {\n      firstName: this.state.firstName,\n      lastName: this.state.lastName,\n      username: this.state.email,\n      password: this.state.password\n    }\n\n    // Using an axios call to hit our Express route for registering user in our database.\n    axios.post(\"user/signup\", payload)\n      .then( function (response) {\n        // If we get back a response from our database, we determine this to be successful and can redirect the user to the home screen.\n        if (response.data.redirect) {\n          console.log(\"successful signup\")\n          window.location = \"/\"\n        } else {\n          console.log(\"Sign-up error\");\n        }\n      })\n      // If we get a server error, alert user of error.\n      .catch(err => {\n        console.log(\"Sign up server error: \")\n        console.log(err);\n      })\n  }\n  \n  // Below is the JSX code to render in app.js. A simple form for registering the user.\n  render() {\n    return (\n      <div className=\"container h-100\">\n        <div className= \"d-flex justify-content-center h-100\">\n          <div className=\"user_card_signup\">\n            <div className=\"d-flex justify-content-center\">\n              <div className=\"brand_logo_container_signup\">\n                <img src=\"globe-logo.svg\" className=\"brand_logo_signup\" alt=\"logo\"></img>\n              </div>\n            </div>\n            <div className=\"d-flex justify-content-center form_container_signup\">\n              <form className=\"signup\">\n                <div className=\"form-group\">\n                  <label>First Name</label>\n                  <input\n                  value={this.state.firstName}\n                  name=\"firstName\"\n                  onChange={this.handleInputChange}\n                  type=\"text\" \n                  className=\"form-control\" \n                  placeholder=\"First Name\">\n\n                  </input>\n                </div>\n                <div className=\"form-group\">\n                  <label>Last Name</label>\n                  <input\n                  value={this.state.lastName} \n                  name=\"lastName\"\n                  onChange={this.handleInputChange}\n                  type=\"text\" \n                  className=\"form-control\" \n                  placeholder=\"Last Name\">\n\n                  </input>\n                </div>\n                <div className=\"form-group\">\n                  <label>Email Address (Username)</label>\n                  <input \n                  value={this.state.email}\n                  name=\"email\"\n                  onChange={this.handleInputChange}\n                  type=\"email\" \n                  className=\"form-control input_user\" \n                  placeholder=\"Email\">\n\n                  </input>\n                </div>\n                <div className=\"form-group\">\n                  <label>Password</label>\n                  <input\n                  value={this.state.password} \n                  name=\"password\"\n                  onChange={this.handleInputChange}\n                  type=\"password\" \n                  className=\"form-control input_pass\" \n                  placeholder=\"Password\">\n\n                  </input>\n                </div>\n                <button onClick={this.handleFormSubmit} className=\"btn btn-primary signup_btn\">Sign Up</button>\n              </form>\n            </div>\n            <div className=\"mt-4\">\n              <div className=\"d-flex justify-content-center links\">\n               <a href=\"/login\" className=\"ml-2\">Have an account?</a>\n              </div>\n            </div>\n\n          </div>\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default Register;","import React, { useState } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom'\n\nconst SearchModal = (props) => {\n    \n    // Set up modal toggling\n    const [modal, setModal] = useState(false);\n\n    const toggle = () => setModal(!modal);\n\n    // Store searcu input values and save to database\n    const handleSearchSave = () => {\n\n        const searchObject = {\n            name: props.name,\n            query: props.query,\n            location: props.location,\n            radius: props.radius,\n            jobType: props.jobType\n        }\n        axios.post('user/savesearch', searchObject)\n            .then(props.getSavedSearches())\n            .then(toggle())\n    }\n\n    // Set application details to state to use for tracking form autofill\n    const trackApplication = () => {\n\n        let applicationObject = {\n            jobTitle: props.jobtitle,\n            jobLocation: props.formattedLocationFull,\n            jobCompany: props.company,\n            jobAdURL: props.url\n        }\n\n        props.application.push(applicationObject)\n        toggle()\n    }\n\n    return (\n        \n        // If saving search render input for search name\n        // If tracking application render button for confirmation and redirect\n\n        <div id={props.modalId}>\n            <Button color={props.modalButtonColor} onClick={toggle}>{props.modalButtonText}</Button>\n            <Modal centered isOpen={modal}>\n                <ModalHeader>{props.modalHeader}</ModalHeader>\n                <ModalFooter>\n                    <Button color=\"danger\" onClick={toggle}>Cancel</Button>\n                    {props.modalId === \"search-modal\" ?\n                        <Button color=\"primary\" onClick={handleSearchSave}>{props.modalConfirm}</Button> :\n                        <Link onClick={trackApplication} to={{ pathname: \"/userForm\", state: { application: props.application } }} className=\"btn btn-primary\">{props.modalConfirm}</Link>\n                    }\n                </ModalFooter>\n            </Modal>\n        </div>\n    );\n}\n\nexport default SearchModal;","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport { Button } from 'reactstrap';\nimport SearchModal from './SearchModal';\n\n// Render card with job details returned from API\n\nfunction SearchResultCard(props) {\n    return (\n        <div className=\"job-card card\">\n            <h4>{props.jobtitle}</h4>\n            <h5>{props.company}</h5>\n            <h6>{props.formattedLocationFull}</h6>\n            <p>{props.snippet}</p>\n            <p>Posted: {props.date}</p>\n            <div className=\"job-card-buttons\">\n                <SearchModal\n                    modalId={\"track-modal\"}\n                    modalButtonColor={\"primary\"}\n                    modalButtonText={\"Track Application\"}\n                    modalHeader={\"Would you like to start tracking this application?\"}\n                    modalConfirm={'Yes'}\n                    jobtitle={props.jobtitle}\n                    company={props.company}\n                    formattedLocationFull={props.formattedLocationFull}\n                    url={props.url}\n                    application={props.application}\n                />\n                <Link to={{ pathname: props.url }} target=\"_blank\"><Button color=\"success\">Apply</Button></Link>\n            </div>\n        </div>\n    );\n}\n\nexport default SearchResultCard;\n","import React from 'react';\n\n// Datalist input for saved searches\nfunction SavedSearchDataList(props) {\n    return (\n            <datalist id=\"savedSearches\" onChange={props.onChange}>\n            {props.children}\n            </datalist>\n    )\n}\n\nexport default SavedSearchDataList;\n","import React from 'react';\n\n// Option component for saved search datalist\nfunction SavedSearchOption(props) {\n    return (\n    <option>{props.search}</option>\n    )\n}\n\nexport default SavedSearchOption;","import React from 'react';\nimport axios from 'axios';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\nimport SearchResultCard from './SearchResultCard';\nimport SavedSearchDataList from './SavedSearchDataList';\nimport SavedSearchOption from './SavedSearchOption';\nimport SearchModal from './SearchModal'\n\n\nclass Search extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            searches: [],\n            query: '',\n            name: '',\n            location: '',\n            radius: '',\n            jobType: '',\n            results: [],\n            application: []\n        }\n    }\n\n    handleChange = ({ target }) => {\n        const { name, value } = target;\n        this.setState({ [name]: value });\n    };\n\n\n    componentDidMount() {\n        this.getSavedSearches();\n    }\n\n    // Retrieve saved searches from database\n    getSavedSearches = () => {\n        axios.get('user/savesearch')\n            .then(res => this.setState({ searches: res.data }));\n    }\n\n    // Set parameters of selected search to state to autofill form inputs\n    loadSearch = (event) => {\n\n        const savedSearch = this.state.searches.find(search => search.name === event.target.value)\n\n        if (!savedSearch) {\n            this.setState({\n                location: '',\n                radius: '',\n                jobType: ''\n            })\n            this.handleChange(event)\n        }\n        else {\n            const savedSearch = this.state.searches.find(search => search.name === event.target.value)\n            this.setState({\n                name: savedSearch.name,\n                query: savedSearch.query,\n                location: savedSearch.location,\n                radius: savedSearch.radius,\n                jobType: savedSearch.jobType\n            })\n        }\n    }\n\n    // Clear state for search results and make call to Indeed API, storing results in state\n    submitSearch = (event) => {\n        event.preventDefault();\n        this.setState({ results: [] });\n        axios.post('user/indeed', this.state)\n            .then((response) => this.setState({ results: response.data.results }));\n    }\n\n    render() {\n        return (\n\n            <div id=\"search-container\">\n                <h3>Your Next Job Awaits...</h3>\n\n                {/* Search form  */}\n                \n                <Form id=\"search-form\" autoComplete=\"off\" inline>\n                    <div className=\"row d-flex justify-content-center\">\n\n                        {/* Search keyword input with select options for saved searches */}\n                        <FormGroup className=\"col-3\">\n                            <Label for=\"query\">Search</Label>\n                            <Input type=\"text\" name=\"query\" id=\"query\" aria-describedby=\"query\" list=\"savedSearches\" value={this.state.query} onChange={this.loadSearch} />\n                            <SavedSearchDataList onChange={this.loadSearch}>\n                                {this.state.searches === undefined ? <SavedSearchOption search={''} /> : this.state.searches.map(search => (\n                                    <SavedSearchOption key={search.name} search={search.name} />\n                                ))}\n                            </SavedSearchDataList>\n                        </FormGroup>\n\n                        {/* Location */}\n                        <FormGroup className=\"col-3\">\n                            <Label for=\"location\">Location</Label>\n                            <Input className=\"form-control\" type=\"text\" name=\"location\" id=\"location\" aria-describedby=\"location\" value={this.state.location} onChange={this.handleChange} />\n                        </FormGroup>\n                        \n                        {/* Location Radius */}\n                        <FormGroup className=\"col-2\">\n                            <Label for=\"radius\">Radius (mi)</Label>\n                            <Input className=\"form-control\" type=\"text\" name=\"radius\" id=\"radius\" aria-describedby=\"radius\" value={this.state.radius} onChange={this.handleChange} />\n                        </FormGroup>\n                        \n                        {/* Job Type Select */}\n                        <FormGroup className=\"col-2\" id=\"jobTypeGroup\">\n                            <Label for=\"jobType\">Job Type</Label>\n                            <Input className=\"form-control\" type=\"select\" name=\"jobType\" id=\"jobType\" value={this.state.jobType} onChange={this.handleChange}>\n                                <option></option>\n                                <option>Full-Time</option>\n                                <option>Part-Time</option>\n                                <option>Contract</option>\n                                <option>Internship</option>\n                                <option>Temporary</option>\n                            </Input>\n                        </FormGroup>\n\n                        {/* Search Submit Button and Search Save Button/Modal */}\n                        <FormGroup className=\"col-2\" id=\"search-buttons\">\n                            <Button color=\"primary\" onClick={this.submitSearch}>Submit</Button>\n                            <SearchModal\n                                name={this.state.name}\n                                query={this.state.query}\n                                location={this.state.location}\n                                radius={this.state.radius}\n                                jobType={this.state.jobType}\n                                modalId={\"search-modal\"}\n                                modalButtonColor={\"success\"}\n                                modalButtonText={\"Save Search\"}\n                                modalHeader={\n                                    <Form>\n                                        <Label for=\"name\">Enter a name to save your search</Label>\n                                        <Input type=\"text\" name=\"name\" id=\"name\" aria-describedby=\"name\" onChange={this.handleChange} />\n                                    </Form>\n                                }\n                                modalCancel={'Cancel'}\n                                modalConfirm={'Save'}\n                                getSavedSearches={this.getSavedSearches}\n                            />\n                        </FormGroup>\n                    </div>\n                </Form>\n\n                {/* Search Results */}\n                <div id=\"search-results-container\">\n                    {(this.state.results).map(result => (\n                        <SearchResultCard\n                            key={result.jobkey}\n                            jobtitle={result.jobtitle}\n                            company={result.company}\n                            formattedLocationFull={result.formattedLocationFull}\n                            snippet={result.snippet}\n                            date={result.date}\n                            url={result.url}\n                            application={this.state.application}\n                        />\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Search;\n","import React, { Component } from 'react';\nimport \"react-step-progress-bar/styles.css\";\nimport { ProgressBar, Step} from \"react-step-progress-bar\";\nimport './form.css';\n\nclass JobDetails_1 extends Component {\n    continue = e => {\n        e.preventDefault();\n        this.props.nextStep();\n    }\n\n    render() {\n        const { jobTitle, jobCompany, jobLocation, jobAdURL, handleChange } = this.props;\n        return (\n            <div className=\"application-form\">\n\n\n\n\n                <ProgressBar percent={25}>\n                    <Step>\n                        {({ accomplished, index }) => (\n                            <div\n                                className={`indexedStep ${accomplished ? \"accomplished\" : null}`}\n                            >\n                                {index + 1}\n                            </div>\n                        )}\n                    </Step>\n                    <Step>\n                        {({ accomplished, index }) => (\n                            <div\n                                className={`indexedStep ${accomplished ? \"accomplished\" : null}`}\n                            >\n                                {index + 1}\n                            </div>\n                        )}\n                    </Step>\n                    <Step>\n                        {({ accomplished, index }) => (\n                            <div\n                                className={`indexedStep ${accomplished ? \"accomplished\" : null}`}\n                            >\n                                {index + 1}\n                            </div>\n                        )}\n                    </Step>\n                    <Step>\n                        {({ accomplished, index }) => (\n                            <div\n                                className={`indexedStep ${accomplished ? \"accomplished\" : null}`}\n                            >\n                                {index + 1}\n                            </div>\n                        )}\n                    </Step>\n                </ProgressBar>\n\n\n\n                <h3>Enter your job information:</h3>\n                <label>\n                    <input\n                        type=\"text\"\n                        name=\"jobTitle\"\n                        value={jobTitle}\n                        onChange={handleChange('jobTitle')}\n                        placeholder=\"Job Title\"\n                    />\n                </label>\n                <label>\n                    <input\n                        type=\"text\"\n                        name=\"jobCompany\"\n                        value={jobCompany}\n                        onChange={handleChange('jobCompany')}\n                        placeholder=\"Company\"\n                    />\n                </label>\n                <label>\n                    <input\n                        type=\"text\"\n                        name=\"jobCompany\"\n                        value={jobLocation}\n                        onChange={handleChange('jobLocation')}\n                        placeholder=\"Location\"\n                    />\n                </label>\n                <label>\n                    <input\n                        type=\"text\"\n                        name=\"jobAdURL\"\n                        value={jobAdURL}\n                        onChange={handleChange('jobAdURL')}\n                        placeholder=\"Link to job advertisement\"\n                    />\n                </label>\n\n                <button className=\"Next\" onClick={this.continue}>\n                    Next »\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default JobDetails_1;","import React, { Component } from 'react';\nimport 'react-dropdown/style.css';\nimport \"react-step-progress-bar/styles.css\";\nimport { ProgressBar, Step} from \"react-step-progress-bar\";\nimport './form.css';\nimport {  Label, Input } from 'reactstrap';\n \nconst options = [\n    { value: 'one', label: 'One' },\n    { value: 'two', label: 'Two' },\n    { value: 'three', label: 'Three' },\n    { value: 'four', label: 'Four' }\n\n];\n\nclass JobDetails_2 extends Component {\n    continue = e => {\n        e.preventDefault();\n        this.props.nextStep();\n    }\n\n    back = e => {\n        e.preventDefault();\n        this.props.prevStep();\n    }\n\n    render(){\n        const { status, interest, LastComm, LastCommDate, handleChange } = this.props;\n        const defaultOption = options[0];\n        return(\n            <div className=\"application-form\">\n                                <ProgressBar percent={50}>\n                    <Step>\n                        {({ accomplished, index }) => (\n                            <div\n                                className={`indexedStep ${accomplished ? \"accomplished\" : null}`}\n                            >\n                                {index + 1}\n                            </div>\n                        )}\n                    </Step>\n                    <Step>\n                        {({ accomplished, index }) => (\n                            <div\n                                className={`indexedStep ${accomplished ? \"accomplished\" : null}`}\n                            >\n                                {index + 1}\n                            </div>\n                        )}\n                    </Step>\n                    <Step>\n                        {({ accomplished, index }) => (\n                            <div\n                                className={`indexedStep ${accomplished ? \"accomplished\" : null}`}\n                            >\n                                {index + 1}\n                            </div>\n                        )}\n                    </Step>\n                    <Step>\n                        {({ accomplished, index }) => (\n                            <div\n                                className={`indexedStep ${accomplished ? \"accomplished\" : null}`}\n                            >\n                                {index + 1}\n                            </div>\n                        )}\n                    </Step>\n                </ProgressBar>\n                <h3>Enter your job information:</h3>\n                <div className=\"form-group\">\n                    <label>What is the current status of this Job?</label>\n                    <select className=\"form-control\" name=\"status\"  value={status} onChange={this.props.handleChange('status')}>\n\n                        <option>Pre-application</option>\n                        <option>Submitted Application</option>\n                        <option>Interview</option>\n                        <option>Assessment</option>\n                        <option>Offered</option>\n                        <option>Accepted Offer</option>\n                    </select>\n                </div>\n                <div className=\"form-group\">\n                    <label>What is your level of interest to this Job?</label>\n                    <select className=\"form-control\" name=\"interest\"  value={interest} onChange={this.props.handleChange('interest')}>\n\n                        <option>Highly Interested</option>\n                        <option>Interested</option>\n                        <option>Neutral</option>\n                        <option>Not Interested</option>\n                    </select>\n                </div>\n                <div className=\"form-group\">\n                    <label>What was the last Communication type? (Skip if not applicable)</label>\n                    <select className=\"form-control\" name=\"LastComm\"  value={LastComm} onChange={handleChange('LastComm')}>\n\n                        <option>In-Person</option>\n                        <option>Email</option>\n                        <option>Phone Call</option>\n                        <option>Video Call</option>\n                        <option>Text</option>\n                    </select>\n                </div>\n                <label>\n                    <label>What was the last Communication date?</label>\n                    <Input className=\"date-input\" defaultValue={LastCommDate} onChange={this.props.handleChange('LastCommDate')} type=\"date\" bsSize=\"lg\" name=\"LastCommDate\" className=\"taskDueDate\"></Input>\n \n                </label>\n                \n                <button className=\"Back\" onClick={this.back}>\n                    « Back\n                </button>\n                <button className=\"Next\" onClick={this.continue}>\n                    Next »\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default JobDetails_2;","import React, { Component } from 'react';\nimport \"react-step-progress-bar/styles.css\";\nimport { ProgressBar, Step } from \"react-step-progress-bar\";\nimport './form.css';\nimport PhoneInput from \"react-phone-number-input\"\n\n\nclass JobDetails_3 extends Component {\n    continue = e => {\n        e.preventDefault();\n        this.props.nextStep();\n    }\n\n    back = e => {\n        e.preventDefault();\n        this.props.prevStep();\n    }\n\n    render() {\n        const { notes, poc, pocEmail, pocPhone, handleChange } = this.props;\n        return (\n            <div className=\"application-form\">\n                <ProgressBar percent={75}>\n                    <Step>\n                        {({ accomplished, index }) => (\n                            <div\n                                className={`indexedStep ${accomplished ? \"accomplished\" : null}`}\n                            >\n                                {index + 1}\n                            </div>\n                        )}\n                    </Step>\n                    <Step>\n                        {({ accomplished, index }) => (\n                            <div\n                                className={`indexedStep ${accomplished ? \"accomplished\" : null}`}\n                            >\n                                {index + 1}\n                            </div>\n                        )}\n                    </Step>\n                    <Step>\n                        {({ accomplished, index }) => (\n                            <div\n                                className={`indexedStep ${accomplished ? \"accomplished\" : null}`}\n                            >\n                                {index + 1}\n                            </div>\n                        )}\n                    </Step>\n                    <Step>\n                        {({ accomplished, index }) => (\n                            <div\n                                className={`indexedStep ${accomplished ? \"accomplished\" : null}`}\n                            >\n                                {index + 1}\n                            </div>\n                        )}\n                    </Step>\n                </ProgressBar>\n                <h3>Enter your job information:</h3>\n\n                <label className=\"lable1\">\n                    <input\n                        type=\"text\"\n                        name=\"poc\"\n                        value={poc}\n                        onChange={handleChange('poc')}\n                        placeholder=\"Contact Name\"\n                    />\n                </label>\n                <label>\n                    <input\n                        type=\"text\"\n                        name=\"pocEmail\"\n                        value={pocEmail}\n                        onChange={handleChange('pocEmail')}\n                        placeholder=\"Contact Email\"\n                    />\n                </label>\n                <label>\n                    <PhoneInput className=\"phone-input\"\n                        placeholder=\"Contact phone\"\n                        value={pocPhone}\n                        name=\"pocPhone\"\n                        onChange={handleChange('pocPhone')}\n                        defaultCountry=\"US\"\n                    >\n                    </PhoneInput>\n                </label>\n                <label>\n                    <input className=\"text-area\"\n                        type=\"textarea\"\n                        name=\"notes\"\n                        value={notes}\n                        onChange={handleChange('notes')}\n                        placeholder=\"Any extra notes?\"\n                    />\n                </label>\n\n                <button className=\"Back\" onClick={this.back}>\n                    « Back\n                </button>\n                <button className=\"Next\" onClick={this.continue}>\n                    Continue »\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default JobDetails_3;","  \nimport React, { Component } from 'react';\nimport Axios from 'axios';\nimport { ProgressBar, Step} from \"react-step-progress-bar\";\nimport './form.css';\n// aref test\n\nclass AllInfo extends Component {\n    back = e => {\n        e.preventDefault();\n        this.props.prevStep();\n    }\n\n    submit = (e,data) => {\n        e.preventDefault();\n        // PROCESS FORM //\n        const appPayload = {\n            title: data.jobTitle,\n            location: data.jobLocation,\n            status: data.status,\n            company: data.jobCompany,\n            jobAdURL: data.jobAdURL,\n            interest: data.interest,\n            poc: data.poc,\n            pocEmail: data.pocEmail,\n            pocPhone: data.pocPhone,\n            lastComm: data.lastComm,\n            lastCommDate: data.lastCommDate,\n            notes: data.notes    \n        }\n\n        Axios.post(\"/user/startApplication\", appPayload)\n            .then((response) => {\n                console.log(response)\n                window.location = \"/applications\"\n            })\n            .catch(error => {\n                console.log(error.message)\n            })\n\n    }\n\n    render(){\n        const { status,interest, jobTitle, jobCompany, jobLocation, jobAdURL, LastComm, LastCommDate, poc, pocEmail, pocPhone, notes  } = this.props;\n        return(\n            <div className=\"application-form\">\n                                <ProgressBar percent={100}>\n                    <Step>\n                        {({ accomplished, index }) => (\n                            <div\n                                className={`indexedStep ${accomplished ? \"accomplished\" : null}`}\n                            >\n                                {index + 1}\n                            </div>\n                        )}\n                    </Step>\n                    <Step>\n                        {({ accomplished, index }) => (\n                            <div\n                                className={`indexedStep ${accomplished ? \"accomplished\" : null}`}\n                            >\n                                {index + 1}\n                            </div>\n                        )}\n                    </Step>\n                    <Step>\n                        {({ accomplished, index }) => (\n                            <div\n                                className={`indexedStep ${accomplished ? \"accomplished\" : null}`}\n                            >\n                                {index + 1}\n                            </div>\n                        )}\n                    </Step>\n                    <Step>\n                        {({ accomplished, index }) => (\n                            <div\n                                className={`indexedStep ${accomplished ? \"accomplished\" : null}`}\n                            >\n                                {index + 1}\n                            </div>\n                        )}\n                    </Step>\n                </ProgressBar>\n                <h4>Here is the information you entered:</h4>\n\n                Job: <b>{jobTitle}</b><br />\n                Company: <b>{jobCompany}</b><br />\n                Location: <b>{jobLocation}</b><br />\n                Interest: <b>{interest}</b><br />\n                Status: <b>{status}</b><br />\n                Link to job advertisement: <b>{jobAdURL}</b><br />\n                Last Communication: <b>{LastComm}</b><br />\n                Last Communication Date:<b>{LastCommDate}</b><br />\n                Contact Name:<b>{poc}</b><br />\n                Contact Email Info:<b>{pocEmail}</b><br />\n                Contact Phone Info:<b>{pocPhone}</b><br />\n                Extra Notes:<b>{notes}</b><br />\n                <button className=\"Back\" onClick={this.back}>\n                    « Make Changes\n                </button>\n                <button className=\"Next\" onClick={(e)=>this.submit(e,this.props)}>\n                Submit\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default AllInfo;\n\n","import React, { Component } from 'react';\nimport JobDetails_1 from './formPages/JobDetails_1';\nimport JobDetails_2 from './formPages/JobDetails_2';\nimport JobDetails_3 from './formPages/JobDetails_3';\nimport AllInfo from './formPages/AllInfo';\n\nexport class StepForm extends Component {\n    state = {\n        step: 1,\n        // step 1\n        jobTitle: '',\n        jobCompany: '',\n        jobLocation: '',\n        \n\n        // step 2\n        jobAdURL:'',\n        status: '',\n        interest: '',\n\n        //step 3\n        LastComm: '',\n        LastCommDate: '',\n        poc:'',\n        pocEmail:'',\n        pocPhone: '',\n        notes: ''\n    }\n\n    componentDidMount() {\n        if (this.props.location.state) {\n            this.setState({\n                jobTitle: this.props.location.state.application[0].jobTitle,\n                jobCompany: this.props.location.state.application[0].jobCompany,\n                jobLocation: this.props.location.state.application[0].jobLocation,\n                jobAdURL: this.props.location.state.application[0].jobAdURL,\n            })\n        } \n    }\n\n    nextStep = () => {\n        const { step } = this.state;\n\n        this.setState({\n            step: step + 1\n        });\n    }\n\n    prevStep = () => {\n        const { step } = this.state;\n        this.setState({\n            step: step - 1\n        });\n    }\n\n    handleChange = input => e => {\n        if (typeof e === \"undefined\"){\n            return\n        }\n        \n        else if (typeof e === \"string\") {\n            this.setState({\n                pocPhone: e\n            })\n        }else{\n            this.setState({[input]: e.target.value});\n        }\n    }\n\n    showStep = () => {\n        const { step, status,interest, jobTitle, jobCompany, jobLocation, jobAdURL, LastComm, LastCommDate,poc,pocEmail, pocPhone, notes } = this.state;\n\n        if(step === 1)\n            return (<JobDetails_1 \n                nextStep = {this.nextStep} \n                handleChange = {this.handleChange} \n                // firstName={firstName} \n                // lastName={lastName}\n                jobTitle={jobTitle} \n                jobCompany={jobCompany}\n                jobLocation={jobLocation}\n                jobAdURL={jobAdURL}\n\n                \n            />);\n        if (step === 2)\n            return (<JobDetails_2\n                nextStep={this.nextStep}\n                prevStep={this.prevStep}\n                handleChange={this.handleChange}\n                status={status}\n                interest={interest}\n\n            />);\n        if (step === 3)\n            return (<JobDetails_3\n                nextStep={this.nextStep}\n                prevStep={this.prevStep}\n                handleChange={this.handleChange}\n                LastComm={LastComm}\n                LastCommDate={LastCommDate}\n                notes={notes}\n                poc={poc}\n                pocPhone={pocPhone}\n                pocEmail={pocEmail}\n\n\n            />);\n        if(step === 4)\n            return (<AllInfo \n                // firstName={firstName} \n                // lastName={lastName}\n                status={status} \n                interest={interest}\n                jobTitle={jobTitle} \n                jobCompany={jobCompany}\n                jobLocation={jobLocation}\n                jobAdURL={jobAdURL}\n                LastComm={LastComm}\n                LastCommDate={LastCommDate}\n                notes={notes}\n                poc={poc}\n                pocPhone={pocPhone}\n                pocEmail={pocEmail}\n                prevStep = {this.prevStep}\n            />);\n    }\n\n    render(){\n        const { step } = this.state;\n\n        return(\n            <>\n                {this.showStep()}\n            </>\n        );\n    }\n}\n\nexport default StepForm;","import React, { Component } from 'react';\nimport { ListGroup, ListGroupItem, ListGroupItemHeading, ListGroupItemText } from 'reactstrap';\nimport {Link} from \"react-router-dom\"\nimport axios from \"axios\"\n\n\nclass Applications extends Component {\n    // Creating state to store applications received from axios query\n    state = {\n        applications: []\n    }\n    // Retrieving applications for user upon loading this component. \n    async componentDidMount() {\n        try {\n            const applications = await axios.get(\"/user/applications\")\n\n            this.setState({\n                applications: applications.data.applications\n            })\n        }\n        catch (error) {\n            if (error) {\n                console.log(error)\n            }\n        }\n    }\n\n    render () {\n        return (\n            <div>\n                <h4 className=\"applicationsHeader\">My Applications</h4>\n            <div>\n            <ListGroup>\n                {\n                    this.state.applications.map(application => {\n                        return (<ListGroupItem>\n                                    <Link to={{\n                                        pathname: \"/singleApplication\",\n                                        state: {\n                                            application: application\n                                        }\n                                    }}>\n                                    <ListGroupItemHeading>{application.title}</ListGroupItemHeading>\n                                    </Link>\n                                        <ListGroupItemText>\n                                            Company Name: {application.company}\n                                        </ListGroupItemText>\n                                        <ListGroupItemText>\n                                            Status: {application.status}\n                                        </ListGroupItemText>\n                                </ListGroupItem>)\n                    })\n                }\n\n            </ListGroup>\n            </div >\n            </div >\n        )\n    }\n\n}\n\nexport default Applications","import React, { useState } from \"react\"\nimport PhoneInput from \"react-phone-number-input\"\n\nconst PhoneInputComponent = (props) => {\n    const [value, setValue] = useState()\n\n    const onChange = e => {\n        props.handleChange(e);\n        setValue();\n    }\n\n    return (\n        \n            <PhoneInput\n                placeholder={props.pocPhone}\n                value={value}\n                name=\"pocPhoneNumber\"\n                onChange={onChange}\n                defaultCountry=\"US\"\n            >\n            </PhoneInput>\n        \n    )\n\n}\n\nexport default PhoneInputComponent;\n\n","import React, { Component } from \"react\"\nimport { Row, Col, Form, FormGroup, Label, Input, FormText, Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport { AvForm, AvField, AvGroup, AvInput, AvFeedback } from \"availity-reactstrap-validation\";\nimport PhoneInput from \"./phoneInput\"\n\n\nclass ModalBodyContent extends Component {\n    constructor (props) {\n        super(props)\n        this.state = {\n            modalType: props.modalType,\n            dropDownOpen: false,\n            dropDownValue: \"Choose Interest\",\n        }\n        this.renderBodyType = this.renderBodyType.bind(this)\n    }\n\n\n    renderBodyType = () => {\n\n        switch(this.state.modalType) {\n\n            case \"editInfo\":\n                return (\n                            <AvForm>\n                                <AvGroup>\n                                    <Label>Job Title</Label>\n                                    <br></br>\n                                    <AvInput \n                                        defaultValue={this.props.title} \n                                        onChange={this.props.handleChange} \n                                        type=\"text\" \n                                        bsSize=\"lg\"\n                                        name=\"title\"\n                                        className=\"infoInput\">\n\n                                    </AvInput>\n                                </AvGroup>\n                                <AvGroup>\n                                    <Label>Company</Label>\n                                    <br></br>\n                                    <AvInput\n                                        defaultValue={this.props.company}\n                                        onChange={this.props.handleChange}\n                                        type=\"text\"\n                                        bsSize=\"lg\"\n                                        name=\"company\"\n                                        className=\"infoInput\">\n\n                                    </AvInput>\n                                </AvGroup>\n                                \n                                <AvGroup>\n                                    <Label>Location (City, State)</Label>\n                                    <br></br>\n                                    <AvField\n                                        validate={{ pattern: { value: /([A-Za-z]+(?: [A-Za-z]+)*),? ([A-Za-z]{2})/ } }}\n                                        defaultValue={this.props.location}\n                                        onChange={this.props.handleChange}\n                                        type=\"text\"\n                                        bsSize=\"lg\"\n                                        name=\"location\"\n                                        className=\"infoInput\">\n\n                                    </AvField>\n                                </AvGroup>\n                                <AvGroup>\n                                    <Label>Job Ad URL (link)</Label>\n                                    <br></br>\n                                    <AvField \n                                        validate={{ pattern: { value: /^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$/ } }} \n                                        defaultValue={this.props.jobAdURL} \n                                        onChange={this.props.handleChange} \n                                        type=\"text\" \n                                        bsSize=\"lg\"\n                                        name=\"jobAdURL\" \n                                        className=\"infoInput\">\n\n                                    </AvField>\n                                </AvGroup>\n                            </AvForm>\n                )\n            case \"editInterest\":\n                return (\n                            <Dropdown isOpen={this.props.dropDownOpen}  toggle={this.props.toggleDropDown}>\n                                <DropdownToggle caret>\n                                 {this.props.currentInterest}\n                                </DropdownToggle>\n                                <DropdownMenu>\n                                    <DropdownItem name=\"interestValue\" onClick={this.props.changeDropDownValue}>Highly Interested</DropdownItem>\n                                    <DropdownItem name=\"interestValue\" onClick={this.props.changeDropDownValue}>Interested</DropdownItem>\n                                    <DropdownItem name=\"interestValue\" onClick={this.props.changeDropDownValue}>Medium</DropdownItem>\n                                    <DropdownItem name=\"interestValue\" onClick={this.props.changeDropDownValue}>Low</DropdownItem>\n                                </DropdownMenu>\n                            </Dropdown>\n                        )\n            case \"editNotes\":\n                return (\n                            <Form>\n                                <FormGroup>\n                                    <Row>\n                                        <Col>\n                                            <Input defaultValue={this.props.modalNotes} onChange={this.props.handleChange} type=\"textarea\" bsSize=\"lg\" name=\"notesText\" className=\"notesText\"></Input>\n                                        </Col>\n                                    </Row>\n                                </FormGroup>\n                                    \n                            </Form>\n                        )\n            case \"editTask\":\n                return (\n                        <Form>\n                            <FormGroup>\n                                <Label for=\"editTaskTitle\">Title</Label>\n                                <br></br>\n                                <Input defaultValue={this.props.taskTitle} onChange={this.props.handleChange} type=\"text\" bsSize=\"lg\" name=\"editTaskTitle\" className=\"taskTitle\"></Input>\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"editTaskDueDate\">Due Date</Label>\n                                <br></br>\n                                <Input onChange={this.props.handleChange} type=\"date\" bsSize=\"lg\" name=\"editTaskDueDate\" className=\"taskDueDate\"></Input>\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"editTaskDescription\">Description</Label>\n                                <br></br>\n                                <Input defaultValue={this.props.taskDescription} onChange={this.props.handleChange} type=\"textarea\" bsSize=\"lg\" name=\"editTaskDescription\" className=\"taskDescription\"></Input>\n                            </FormGroup>\n                        </Form>\n                        )\n            case \"editComm\":\n                return (\n                        <Form>\n                            <FormGroup>\n                                <Dropdown isOpen={this.props.dropDownOpen}  toggle={this.props.toggleDropDown}>\n                                <Label for=\"dropDownType\">Type</Label>\n                                <br></br>\n                                <DropdownToggle name=\"dropDownType\" caret>\n                                    {this.props.lastCommType}\n                                </DropdownToggle>\n                                <DropdownMenu>\n                                    <DropdownItem name=\"commValue\" onClick={this.props.changeDropDownValue}>In-Person</DropdownItem>\n                                    <DropdownItem name=\"commValue\" onClick={this.props.changeDropDownValue}>Email</DropdownItem>\n                                    <DropdownItem name=\"commValue\" onClick={this.props.changeDropDownValue}>Phone Call</DropdownItem>\n                                    <DropdownItem name=\"commValue\" onClick={this.props.changeDropDownValue}>Video Call</DropdownItem>\n                                    <DropdownItem name=\"commValue\" onClick={this.props.changeDropDownValue}>Text</DropdownItem>\n                                </DropdownMenu>\n                                </Dropdown>\n                                \n                            </FormGroup>\n                        <FormGroup>\n                            <Label for=\"lastCommDate\">Date</Label>\n                            <br></br>\n                            <Input defaultValue={this.props.lastCommDate} onChange={this.props.handleChange} type=\"date\" bsSize=\"lg\" name=\"lastCommDate\" className=\"taskDueDate\"></Input>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"lastCommDescription\">Description</Label>\n                            <br></br>\n                            <Input defaultValue={this.props.lastCommDescription} onChange={this.props.handleChange} type=\"textarea\" bsSize=\"lg\" name=\"lastCommDescription\" className=\"taskDescription\"></Input>\n                        </FormGroup>\n                            \n                        </Form>\n                )\n            case \"editContact\":\n                return (\n                        <Form>\n                            <FormGroup>\n                                <Label for=\"pocName\">Point of Contact</Label>\n                                <br></br>\n                                <Input defaultValue={this.props.poc} onChange={this.props.handleChange} type=\"text\" bsSize=\"lg\" name=\"pocName\" className=\"taskTitle\"></Input>\n                                </FormGroup>\n                            <FormGroup>\n                                <Label for=\"pocEmail\">Email</Label>\n                                <br></br>\n                                <Input defaultValue={this.props.pocEmail} onChange={this.props.handleChange} type=\"email\" bsSize=\"lg\" name=\"pocEmail\" className=\"taskDueDate\"></Input>\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"pocPhoneNumber\">Phone Number</Label>\n                                <br></br>\n                                <PhoneInput pocPhone={this.props.pocPhone} handleChange={this.props.handleChange}></PhoneInput>\n                            </FormGroup>\n                        </Form>\n                )\n            case \"addTask\":\n                return (\n                    <Form>\n                        <FormGroup>\n                            <Label for=\"addTaskTitle\">Title</Label>\n                            <br></br>\n                            <Input onChange={this.props.handleChange} type=\"text\" bsSize=\"lg\" name=\"addTaskTitle\" className=\"taskTitle\"></Input>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"addTaskDueDate\">Due Date</Label>\n                            <br></br>\n                            <Input onChange={this.props.handleChange} type=\"date\" bsSize=\"lg\" name=\"addTaskDueDate\" className=\"taskDueDate\"></Input>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"addTaskDescription\">Description</Label>\n                            <br></br>\n                            <Input onChange={this.props.handleChange} type=\"textarea\" bsSize=\"lg\" name=\"addTaskDescription\" className=\"taskDescription\"></Input>\n                        </FormGroup>\n                    </Form>\n                    )\n            default:\n                return null\n        }\n        \n    }\n\n    render () {\n        return (\n            <div>\n                {this.renderBodyType()}\n            </div>\n        )\n    }\n}\n\nexport default ModalBodyContent","import React, { useState } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport ModalBodyContent from \"./modalBody\"\n\nconst ModalExample = (props) => {\n    const {\n        buttonLabel,\n        className,\n        modalTitle,\n        modalType,\n        dropDownOpen\n    } = props;\n\n    const [modal, setModal] = useState(false);\n\n    const toggleOpen = () => {\n        props.storeState()\n        setModal(!modal);\n    }\n\n    const toggleCancel = () => {\n        props.resetState()\n        setModal(!modal)\n    }\n\n    const submit = () => {\n        switch (modalType){\n            case \"editInfo\":\n                console.log(\"editInfo\")\n                props.editInfo()\n                setModal(!modal)\n                break;\n            case \"editInterest\":\n                console.log(\"editInterest\")\n                props.editInterest()\n                setModal(!modal)\n                break;\n            case \"editNotes\":\n                console.log(\"editNotes\")\n                props.editNotes()\n                setModal(!modal)\n                break;\n            case \"editTask\":\n                console.log(\"editTask\")\n                props.editTask(props.taskID)\n                setModal(!modal)\n                break;\n            case \"editComm\":\n                console.log(\"editComm\")\n                props.editComm()\n                setModal(!modal)\n                break;\n            case \"editContact\":\n                console.log(\"editContact\")\n                props.editContact()\n                setModal(!modal)\n                break;\n            case \"addTask\":\n                console.log(\"addTask\")\n                props.addTask()\n                setModal(!modal)\n                break;\n            default:\n                setModal(!modal)\n        }\n    }\n\n    return (\n        <div>\n            <Button className={className} color=\"primary\" onClick={toggleOpen}>{buttonLabel}</Button>\n            <Modal isOpen={modal} toggle={toggleCancel}>\n                <ModalHeader toggle={toggleCancel}>{modalTitle}</ModalHeader>\n                <ModalBody>\n                    <ModalBodyContent \n                        title={props.title} \n                        company={props.company}\n                        location={props.location} \n                        jobAdURL={props.jobAdURL} \n                        taskTitle={props.taskTitle} \n                        taskDescription={props.taskDescription} \n                        currentInterest={props.currentInterest} \n                        lastCommDescription={props.lastCommDescription} \n                        lastCommDate={props.lastCommDate} \n                        lastCommType={props.lastCommType} \n                        poc={props.poc} \n                        pocEmail={props.pocEmail} \n                        pocPhone={props.pocPhone} \n                        modalNotes={props.modalNotes} \n                        handleChange={props.handleChange} \n                        dropDownValue={props.dropDownValue} \n                        dropDownOpen={dropDownOpen} \n                        toggleDropDown={props.toggleDropDown} \n                        changeDropDownValue={props.changeDropDownValue} \n                        modalType={modalType} />   \n                </ModalBody>\n                <ModalFooter>\n                    <Button id={props.taskID} color=\"primary\" onClick={submit}>Submit</Button>{' '}\n                    <Button color=\"secondary\" onClick={toggleCancel}>Cancel</Button>\n                </ModalFooter>\n            </Modal>\n        </div>\n    );\n}\n\nexport default ModalExample;","// Importing react and component to power this page. Importing several components of reactstrap to format page. \n// Importing Modal module for edit modals. \n// Importiong axios to make database calls \nimport React, { Component } from 'react';\nimport { Jumbotron, Container, Row, Col, Card, Button, CardText, CardBody } from 'reactstrap';\nimport { Link } from \"react-router-dom\"\nimport Stepper from 'react-stepper-horizontal'\nimport Modal from \"./modal\"\nimport Axios from 'axios';\n\n// Setting up our SingleApplication component as a class component\n\nclass SingleApplication extends Component {\n\n    constructor (props) {\n        super (props)\n        // Setting initial state that will be updated to store application information to be rendered on screen\n        this.state = {\n            tasks: [],\n            // Storing steps which correspond in our stepper to specific application statuses.\n            steps: [{\n                title: 'Pre-Application'\n            }, {\n                title: 'Submitted Application'\n            }, {\n                title: 'Interview'\n            }, {\n                title: 'Assessment'\n            }, {\n                title: 'Offered'\n            }, {\n                title: 'Accepted Offer'\n            }],\n            // Dropdown values in state will be used to track the value and toggle dropdowns in our modals. \n            dropDownOpen: false,\n            dropDownValue: \"Select\"\n        };\n\n        // Binding all functions below to the SingleApplication component. Necessary to be abel to use functions.\n        this.onClickNext = this.onClickNext.bind(this)\n        this.onClickBack = this.onClickBack.bind(this)\n        this.storeState = this.storeState.bind(this)\n        this.resetState = this.resetState.bind(this)\n        this.toggleDropDown = this.toggleDropDown.bind(this)\n        this.changeDropDownValue = this.changeDropDownValue.bind(this)\n        this.editInfo = this.editInfo.bind(this)\n        this.editInterest = this.editInterest.bind(this)\n        this.editNotes = this.editNotes.bind(this)\n        this.editTask = this.editTask.bind(this)\n        this.editComm = this.editComm.bind(this)\n        this.editContact = this.editContact.bind(this)\n        this.addTask = this.addTask.bind(this)\n        this.deleteTask = this.deleteTask.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n\n    }\n\n    // onClickNext triggers a change in status one step forward. \n\n    onClickNext() {\n        // Get current step from state\n        const { currentStep } = this.state;\n        // Check to ensure current step isn't at the final step. If it is, we don't want to allow current step count to be greater than last step in array. \n        if (currentStep < 5) {\n            // Adding one to current step to push to next value in array\n            let newStep = currentStep + 1\n            let newStatus = this.state.steps[newStep]\n            // Building body for our put call with value of new step\n            const body = {\n                status: newStatus.title\n            }\n            // Put call to database to update application with new status.\n            Axios.put(\"/user/application/\" + this.state._id, body)\n                .then(response => {\n                    this.setState(response.data)\n                })\n            // Setting state with current step.  \n            this.setState({\n                currentStep: newStep\n            })\n        }\n        \n    }\n\n    // onClickBack performs same functionality as onClickNext, however subtracting one from current step instead of adding to implicate moving back one step in process.\n    \n    onClickBack() {\n        const { currentStep } = this.state;\n        if (currentStep > 0) {\n            let newStep = currentStep - 1\n            let newStatus = this.state.steps[newStep]\n            const body = {\n                status: newStatus.title\n            }\n            Axios.put(\"/user/application/\" + this.state._id, body)\n                .then(response => {\n                    this.setState(response.data)\n                })\n            this.setState({\n                currentStep: currentStep - 1\n            })\n        }\n    }\n\n    // storeState stores current state in Local Storage. The purpose is to be able to access current state if user decides to cancel on any changes to application they made in edit screen.\n\n    storeState() {\n        localStorage.setItem(\"state\", JSON.stringify(this.state))\n    }\n\n    // resetState will be called if user decides to cancel any edits. Editing will update state in real time, so resetState sets state back to what state was before entering edit screen.\n\n    resetState() {\n        console.log(\"reset state fired\")\n        const savedState = JSON.parse(localStorage.getItem(\"state\"))\n        this.setState(savedState)\n    }\n\n    // Toggle dropdown dynamically updates dropDownOpen boolean value which is used to open and close dropdowns in our modals. \n    toggleDropDown () {\n        if (this.state.dropDownOpen) {\n            this.setState({\n                dropDownOpen: false\n            })\n        }\n        else {\n            this.setState({\n                dropDownOpen: true\n            })\n        }\n    }\n\n    // changeDropDwonValue sets state based on value selected in dropdown. \n\n    changeDropDownValue (e) {\n        // This function is used for two different dropdowns. The conditional checks to see if the event was triggered on our interestValue element. If so, we know that there was an update to interest. \n        if(e.currentTarget.name===\"interestValue\"){\n            // Setting new interest value in state to the text content selected from dropdown.\n            this.setState({\n                dropDownValue: e.currentTarget.textContent,\n                interest: e.currentTarget.textContent\n            })\n            // Else case is our other dropdown, which is to update the lastCommType in state.\n        } else {\n            this.setState({\n                dropDownValue: e.currentTarget.textContent,\n                lastCommType: e.currentTarget.textContent\n            })\n        }\n\n    }\n\n    // Edit info fires when the user submits an edit to the application info section. \n\n    editInfo(){\n        // With state having been dynamically updated upon input change, when user submits, state will be the data needed for the update call. \n        const body = {\n            title: this.state.title,\n            company: this.state.company,\n            location: this.state.location,\n            jobAdURL: this.state.jobAdURL\n        }\n\n        // Axios call to api route for updating applicaiton, taking in application id from state and passing in body above as our update.\n        // Upon success, setting state with updated applicaiton data.\n       \n        Axios.put(\"/user/application/\" + this.state._id, body)\n            .then(response => {\n                this.setState(response.data)\n            })\n\n    }\n\n    // Edit Interest call on submit of edit interest section.\n\n    editInterest () {\n        // changeDropDownValue sets state with dropDownValue selected, which we set as our request body for update call. \n        const body = {\n            interest: this.state.dropDownValue\n        }\n\n        // Axios call to api route for updating application, passing in our interest update as the request body. Upon success, updates state wtih newly saved application data.\n        Axios.put(\"/user/application/\" + this.state._id, body)\n            .then(response => {\n                this.setState(response.data)\n            })\n    }\n\n    // Edit Notes section submits an update call with new notes on the application.\n    // Takes in updated notes from state and passes data to the update application api route. Upon success, updates state with newly saved application data.\n\n    editNotes () {\n        const body = {\n            notes: this.state.notes\n        }\n\n        Axios.put(\"/user/application/\" + this.state._id, body)\n            .then(response => {\n                this.setState(response.data)\n            })\n    }\n\n    // Edit task takes in changes made to task and saves edits to database. \n\n    editTask (id) {\n        // Setting three variables which will be passed as body of request for update call.\n        let title;\n        let dueDate;\n        let description;\n\n        // As there are multiple tasks on a page, and we use the same three fields (editTaskTitle, editTaskDueDate and editTaskDescription) upon input change to record new values, it's possible that not all three fields were edited.\n        // if no change event fires, then the value in state will be blank (see end of function where values are cleared). \n        \n        // First conditional checks if task title in state isn't empty, which implies an edit was made. We set title equal to this value. \n        // Else, set title equal to title saved in state for this task. Loop through tasks in state and match on id.\n\n        if (this.state.editTaskTitle && this.state.editTaskTitle != \"\") {\n            title = this.state.editTaskTitle\n        } else {\n            this.state.tasks.forEach(task => {\n                if (id===task._id) {\n                    title=task.title\n                }\n            })\n        }\n\n        // Second conditional checks to see if editTaskdueDate isn't empty, which implies an edit. Set dueDate equal to this value if condition met.\n        // Else, set dueDate equal to value in state for task, implying no change.\n\n        if (this.state.editTaskDueDate && this.state.editTaskDueDate != \"\"){\n            dueDate = this.state.editTaskDueDate\n        } else {\n            this.state.tasks.forEach(task => {\n                if (id===task._id) {\n                    dueDate = task.dueDate\n                }\n            })\n        }\n\n        // Third conditional is the same functionality as with previous two, but for taskDescription.\n\n        if (this.state.editTaskDescription && this.state.editTaskDescription != \"\"){\n            description = this.state.editTaskDescription\n        } else {\n            this.state.tasks.forEach(task => {\n                if(id===task._id) {\n                    description = task.description\n                }\n            })\n        }\n\n        // Once we've determined which values to pass for the update, set body of update including appplicationId\n\n        const body = {\n            title: title,\n            dueDate: dueDate,\n            description: description,\n            applicationId: this.state._id\n        }\n\n        // Axios request to database for update task route, saving new task in database. \n        // As a response, new application data is passed to be set as state. \n        // editTaskTitle, editTaskDueDate and editTaskDescription are cleared for next task edit.\n\n        Axios.put(\"/user/task/\" + id, body)\n            .then(response => {\n                console.log(response)\n                this.setState(response.data)\n                this.setState({\n                    editTaskTitle: \"\",\n                    editTaskDueDate: \"\",\n                    editTaskDescription: \"\"\n                })\n            })\n    }\n\n    deleteTask (e) {\n        console.log(e.currentTarget.id)\n        console.log(\"delete task function\")\n\n        Axios.delete(\"/user/task/\" + this.state._id +  \"/\" + e.currentTarget.id)\n            .then(response => {\n                this.setState(response.data)\n            })\n    }\n\n    editComm () {\n        console.log(\"Edit comm function fired\")\n        // Grabbing dropdownvalue to submit for type on api call\n        let pass = false\n        let commTypeValues = [\"In-Person\", \"Email\", \"Phone Call\", \"Video Call\", \"Text\"]\n        commTypeValues.forEach( value=> {\n            if (this.state.dropDownValue===value){\n                pass=true\n            }\n        })\n\n        if (!this.state.lastCommDate || !this.state.lastCommDescription || pass===false) {\n            console.log(\"Error - incomplete information\")\n            alert(\"Please ensure all fields are entered completely\")\n        }\n        else {\n            console.log(\"all three are good\")\n            const body = {\n                lastCommType: this.state.dropDownValue,\n                lastCommDate: this.state.lastCommDate,\n                lastCommDescription: this.state.lastCommDescription\n            }\n\n            Axios.put(\"user/application/\" + this.state._id, body)\n                .then(response => {\n                    this.setState(response)\n                })\n        }\n    }\n\n    editContact() {\n        console.log(\"Edit contact function fired\")\n\n        const body = {\n            poc: this.state.poc,\n            pocEmail: this.state.pocEmail,\n            pocPhone: this.state.pocPhone\n        }\n\n        Axios.put(\"user/application/\" + this.state._id, body)\n            .then(response => {\n                this.setState(response)\n            })\n    }\n\n    addTask() {\n        console.log(\"Add task function fired\")\n        const body = {\n            applicationId: this.state._id,\n            taskTitle: this.state.taskTitle,\n            taskDueDate: this.state.taskDueDate,\n            taskDescription: this.state.taskDescription\n        }\n\n        Axios.post(\"/user/task\", body)\n            .then(response=> {\n                this.setState(response.data)\n            })\n    }\n\n\n    handleChange(e) {\n        // Phone Number Input case\n\n        if (typeof e === \"undefined\"){\n            return\n        }\n        \n        else if (typeof e === \"string\") {\n            this.setState({\n                pocPhone: e\n            })\n        }\n\n        else {\n            switch(e.currentTarget.name){\n                case \"title\":\n                    console.log(\"title\")\n                    this.setState({\n                        title: e.currentTarget.value\n                    })\n                    break;\n                case \"company\":\n                    console.log(\"company\")\n                    this.setState({\n                        company: e.currentTarget.value\n                    })\n                    break;\n                case \"location\":\n                    console.log(\"location\")\n                    this.setState({\n                        location: e.currentTarget.value\n                    })\n                    break;\n                case \"jobAdURL\":\n                    console.log(\"jobAdURL\")\n                    this.setState({\n                        jobAdURL: e.currentTarget.value\n                    })\n                    break;\n                case \"notesText\":\n                    console.log(\"notesText\")\n                    this.setState({\n                        notes: e.currentTarget.value\n                    })\n                    break;\n                case \"addTaskTitle\":\n                    console.log(\"taskTitle\")\n                    this.setState({\n                        taskTitle: e.currentTarget.value\n                    })\n                    break;\n                case \"addTaskDueDate\":\n                    console.log(\"taskDueDate\")\n                    this.setState({\n                        taskDueDate: e.currentTarget.value\n                    })\n                    break;\n                case \"editTaskTitle\":\n                    console.log(\"editTaskTitle\")\n                    this.setState({\n                        editTaskTitle: e.currentTarget.value\n                    })\n                    break;\n                case \"editTaskDueDate\":\n                    console.log(\"editTaskDueDate\")\n                    this.setState({\n                        editTaskDueDate: e.currentTarget.value\n                    })\n                    break;\n                case \"editTaskDescription\":\n                    console.log(\"editTaskDescription\")\n                    this.setState({\n                        editTaskDescription: e.currentTarget.value\n                    })\n                    break;\n                case \"addTaskDescription\":\n                    console.log(\"taskDescription\")\n                    this.setState({\n                        taskDescription: e.currentTarget.value\n                    })\n                    break;\n                case \"lastCommDate\":\n                    console.log(\"lastCommDate\")\n                    this.setState({\n                        lastCommDate: e.currentTarget.value\n                    })\n                    break;\n                case \"lastCommDescription\":\n                    console.log(\"lastCommDescription\")\n                    this.setState({\n                        lastCommDescription: e.currentTarget.value\n                    })\n                    break;\n                case \"pocName\":\n                    console.log(\"pocName\")\n                    this.setState({\n                        poc: e.currentTarget.value\n                    })\n                    break;\n                case \"pocEmail\":\n                    console.log(\"pocEmail\")\n                    this.setState({\n                        pocEmail: e.currentTarget.value\n                    })\n                    break;\n                default: \n                    console.log(\"default\")\n            }\n        }\n    }\n\n\n    componentDidMount() {\n        let appID = this.props.location.state.application._id\n\n        Axios.get(\"/user/applications/\" + appID)\n            .then(response => {\n                this.setState(response.data)\n                var currentStep;\n                switch (response.data.status) {\n                    case \"Pre-Application\":\n                        currentStep = 0\n                        break;\n                    case \"Submitted Application\":\n                        currentStep = 1\n                        break;\n                    case \"Interview\":\n                        currentStep = 2\n                        break;\n                    case \"Assessment\":\n                        currentStep = 3\n                        break;\n                    case \"Offered\":\n                        currentStep = 4\n                        break;\n                    case \"Accepted Offer\":\n                        currentStep = 5\n                        break;\n                    default:\n                        currentStep = 0\n                }\n\n                this.setState({\n                    currentStep: currentStep\n                })\n            })\n    }\n    \nrender () {\n    return (\n        <div>\n            <Jumbotron fluid>\n                <Container fluid>\n                    <div>\n                        <h2 className=\"display-3\"> {this.state.title}\n                            <div className=\"companyLocationDiv\">\n                                <small className=\"companyName\">{this.state.company}</small>\n                                <small className=\"companyLocation\">{this.state.location}</small>\n                            </div>\n                        </h2>\n                    </div>\n                    <div>\n                        <Stepper steps={this.state.steps} activeStep = {this.state.currentStep}  />\n                        <Modal storeState={this.storeState} resetState={this.resetState} title={this.state.title} company={this.state.company} location={this.state.location} jobAdURL={this.state.jobAdURL} handleChange={this.handleChange} editInfo={this.editInfo} modalTitle=\"Edit Applicaiton Info\" modalType=\"editInfo\" className=\"editInfoBtn\" buttonLabel=\"Edit Info\"> </Modal>\n                        <Button className=\"statusBtn\" onClick={this.onClickBack}>Move Back </Button>\n                        <Button className=\"statusBtn\" onClick={ this.onClickNext }>Move Forward </Button>\n                    </div>\n                </Container>\n            </Jumbotron>\n            <Container fluid>\n                <Row xs=\"2\">\n                    {/* Notes Card */}\n                    <Col xs=\"7\">\n                        <Row>\n                            <Col xs=\"1\"></Col>\n                            <Col xs=\"10\">\n                                <h4 className=\"notesTitle\">Notes</h4>\n                                <Card className=\"notesCard\">\n                                    <CardBody>\n                                        <CardText>{this.state.notes}</CardText>\n                                        <Modal storeState={this.storeState} resetState={this.resetState} modalNotes={this.state.notes} handleChange={this.handleChange} editNotes={this.editNotes} modalTitle=\"Edit Notes\" dropDownOpen={this.state.dropDownOpen} dropDownValue={this.state.dropDownValue} toggleDropDown={this.toggleDropDown} changeDropDownValue={this.changeDropDownValue} modalType=\"editNotes\" className=\"notesBtn\" buttonLabel=\"Edit Notes\" />\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                            <Col xs=\"1\"></Col>\n                        </Row>\n                        <Row>\n                            <Col xs=\"1\"></Col>\n                            <Col className=\"colMargin\" xs=\"10\">\n                                <h4 className=\"lastCommTitle\">Last Communication</h4>\n                                <Card>\n                                    <CardBody class=\"lastCommBody\">\n                                        <CardText>Type: {this.state.lastCommType} </CardText>\n                                        <CardText>Last Communication Date: {this.state.lastCommDate} </CardText>\n                                        <CardText>Description: {this.state.lastCommDescription}</CardText>\n                                        <Modal storeState={this.storeState} resetState={this.resetState} lastCommType={this.state.lastCommType} lastCommDate={this.state.lastCommDate} lastCommDescription={this.state.lastCommDescription} handleChange={this.handleChange} editComm={this.editComm} modalTitle=\"Edit Last Communication Info\" dropDownOpen={this.state.dropDownOpen} dropDownValue={this.state.dropDownValue} toggleDropDown={this.toggleDropDown} changeDropDownValue={this.changeDropDownValue} modalType=\"editComm\" className=\"lastCommBtn\" buttonLabel=\"Edit Last Comm\" />\n\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                            <Col xs=\"1\"></Col>\n\n                        </Row>\n\n                    </Col>\n                    {/* Interest column and Notes Column */}\n                    <Col xs=\"5\">\n                        <Row>\n                            <Col xs=\"11\">\n                                <h4 className=\"interestTitle\">Interest and Job Ad</h4>\n                                <Card className=\"interestCard\">\n                                    <CardBody>\n                                        <CardText className=\"interestText\">{this.state.interest}</CardText>\n                                        <Modal storeState={this.storeState} resetState={this.resetState} currentInterest={this.state.interest} handleChange={this.handleChange} editInterest={this.editInterest} modalTitle=\"Edit Interest\" dropDownOpen={this.state.dropDownOpen} dropDownValue={this.state.dropDownValue} toggleDropDown={this.toggleDropDown} changeDropDownValue={this.changeDropDownValue} modalType=\"editInterest\" className=\"editInterestBtn\" buttonLabel=\"Edit Interest\" />\n                                        <Link to={{ pathname: this.state.jobAdURL }} target=\"_blank\"><Button className=\"jobAdBtn\">View Job Ad</Button></Link>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                            <Col xs=\"1\"></Col>\n                        </Row>\n                        <Row>\n                            <Col className=\"colMargin\" xs=\"11\">\n                                <h4 className=\"contactTitle\">Contact</h4>\n                                <Card className=\"contactCard\">\n                                    <CardBody class=\"contactBody\">\n                                        <CardText>Point of Contact: {this.state.poc} </CardText>\n                                        <CardText>Email Address: {this.state.pocEmail} </CardText>\n                                        <CardText>Phone Number: {this.state.pocPhone} </CardText>\n                                        <Modal storeState={this.storeState} resetState={this.resetState} poc={this.state.poc} pocEmail={this.state.pocEmail} pocPhone={this.state.pocPhone} handleChange={this.handleChange} editContact={this.editContact} modalTitle=\"Edit Contact Info\" dropDownOpen={this.state.dropDownOpen} dropDownValue={this.state.dropDownValue} toggleDropDown={this.toggleDropDown} changeDropDownValue={this.changeDropDownValue} modalType=\"editContact\" className=\"contactBtn\" buttonLabel=\"Edit Info\" />\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                            <Col xs=\"1\"></Col>\n                        </Row>\n                    </Col>\n                </Row>\n                <Row xs=\"2\">\n                    \n                    <Col xs=\"2\"></Col>\n                    <Col className=\"colMargin\" xs=\"8\">\n                        <div>\n                            <h4 className=\"taskHeader\">Tasks</h4>\n                            <Modal storeState={this.storeState} resetState={this.resetState} handleChange={this.handleChange} addTask={this.addTask} modalTitle=\"Add Task\" dropDownOpen={this.state.dropDownOpen} dropDownValue={this.state.dropDownValue} toggleDropDown={this.toggleDropDown} changeDropDownValue={this.changeDropDownValue} modalType=\"addTask\" className=\"addTask\" buttonLabel=\"Add Task\" />\n                        </div>\n                        {this.state.tasks.map(task => {\n                            return (\n                                <Card className=\"taskCard\">\n                                    <CardBody className=\"taskBody\">\n                                        <CardText>Title: {task.title} </CardText>\n                                        <CardText>Due Date: {task.dueDate} </CardText>\n                                        <CardText>Description: {task.description} </CardText>\n                                        <Modal storeState={this.storeState} resetState={this.resetState} taskTitle={task.title} taskDescription={task.description} taskID={task._id} handleChange={this.handleChange} editTask={this.editTask} modalTitle=\"Edit Task\" dropDownOpen={this.state.dropDownOpen} dropDownValue={this.state.dropDownValue} toggleDropDown={this.toggleDropDown} changeDropDownValue={this.changeDropDownValue} modalType=\"editTask\" className=\"editTaskBtn\" buttonLabel=\"Edit Task\" />\n                                        <Button id={task._id} className=\"deleteTaskBtn\" color=\"danger\" onClick={e => {this.deleteTask(e)}}>Delete Task</Button>\n                                    </CardBody>\n                                </Card>\n                            )\n                        })}\n\n                    </Col>\n                    <Col xs=\"2\"></Col>\n\n            \n                </Row>\n            </Container>\n        </div>\n    )\n}\n\n\n\n\n}\n\nexport default SingleApplication;","import axios from \"axios\"\n\nconst Auth = {\n    async getAuth() {\n        async function getValue () {\n            try {\n                const userAuth = await axios.get(\"/user\")\n\n                if (userAuth.data===\"no user logged in\") {\n                    return false\n                }\n                else {\n                    return true\n                }\n            }\n            catch (error) {\n                console.log(error)\n            }\n        }\n        const isAuth = await getValue()\n        return isAuth\n    }\n};\nexport default Auth;","import React, { Component } from \"react\"\nimport { Route, Redirect } from \"react-router-dom\"\n\nimport Auth from \"./auth\"\n\nclass PrivateRoute extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            loading: true,\n            isAuthenticated: false\n        }\n    }\n\n    componentDidMount() {\n        Auth.getAuth()\n            .then(isAuthenticated => {\n                console.log(isAuthenticated)\n                this.setState({\n                    loading: false,\n                    isAuthenticated: isAuthenticated\n                })\n            })\n    }\n\n    render () {\n        const { component: Component, ...rest } = this.props\n        return (\n            <Route\n                {...rest}\n                render={ props => \n                    this.state.isAuthenticated ? (\n                        <Component {...props} />\n                    ) : (\n                        this.state.loading ? (\n                            <div>LOADING</div>\n                        ) : (\n                            <Redirect to=\"/\" />\n                        )\n                    )\n                }\n            />\n        )\n    }\n}\n\nexport default PrivateRoute","import React from 'react';\nimport { Switch, Route} from 'react-router-dom';\n\nimport LandingPage from './landingpage';\nimport About from './about';\nimport Contact from './contact';\nimport LogIn from './logIn';\nimport Register from './register';\nimport Search from './Search';\nimport UserForm from './userForm'\nimport Applications from './applications';\nimport SingleApplication from './singleApplication';\nimport PrivateRoute from \"./privateRoute\";\n\nfunction Main(props) {\n  return (\n    <Switch>\n    <Route exact path=\"/\" component={props.loggedIn === false ? LandingPage : Search} />\n    <Route exact path=\"/about\" component={About} />\n    <Route exact path=\"/contact\" component={Contact} />\n    <Route exact path=\"/login\" component={LogIn} />\n    <Route exact path=\"/register\" component={Register} />\n    <PrivateRoute exact path=\"/search\" component={Search} />\n    <PrivateRoute exact path=\"/userForm\" component={UserForm} />\n    <PrivateRoute exact path=\"/applications\" component={Applications} />\n    <PrivateRoute exact path=\"/singleApplication\" component={SingleApplication} />\n  </Switch>\n\n  )\n}\n\n\n\n\nexport default Main;","import React, { Component } from 'react';\nimport './App.css';\nimport { Layout, Header, Navigation, Drawer, Content } from 'react-mdl';\nimport Conditional from \"./components/conditional\"\nimport Main from './components/main';\nimport axios from \"axios\"\nimport {Link} from 'react-router-dom';\n\nclass App extends Component {\n  state = {\n    loggedIn: false,\n    username: \"\",\n    redirect: false,\n    redirectTo: null,\n    component: null\n  }\n\n updateUser = (userObject) => {\n  this.setState(userObject)\n}\n\ncomponentDidMount(){\n  axios.get(\"/user\")\n    .then((response, error) => {\n      if (error) {\n        console.log(error.message)\n      }\n      else if (response.data===\"no user logged in\") {\n        this.setState({\n          loggedIn: false\n        })\n      }\n      else {\n        this.setState({\n          loggedIn: true\n        })\n      }\n    })\n}\n\nlogout = () => {\n  axios.get(\"user/logout\")\n  .then((response, error) => {\n    if (error) {\n      console.log(error.message)\n    }\n    else {\n      console.log(response)\n      this.setState({\n        loggedIn: false,\n        firstName: \"\",\n        lastName: \"\",\n        username: \"\"\n      })\n    }\n  })\n}\n\n  render() {\n    return (\n      <div className=\"demo-big-content\">\n    <Layout>\n          <Conditional if={this.state.loggedIn===true}>\n          <Header className=\"header-color\" title={<Link style={{textDecoration: 'none', color: 'white'}} to=\"/\">DreamJob</Link>} scroll>\n            <Navigation>\n              <Link to=\"/search\">Search</Link>\n              <Link to=\"/userForm\">Track an Application</Link>\n              <Link to=\"/applications\">My Applications</Link>\n              <Link to=\"/about\">About Us</Link>\n              <Link to=\"/contact\">Contact</Link>\n              <Link to=\"/login\" onClick={this.logout}>Logout</Link>\n            </Navigation>\n            </Header>\n          </Conditional>\n          <Conditional if={this.state.loggedIn===false}>\n            <Header className=\"header-color\" title={<Link style={{ textDecoration: 'none', color: 'white' }} to=\"/\">DreamJob</Link>} scroll>\n              <Navigation>\n                <Link to=\"/register\">Register Today</Link>\n                <Link to=\"/login\">Log In</Link>\n                <Link to=\"/about\">About Us</Link>\n                <Link to=\"/contact\">Contact</Link>\n              </Navigation>\n            </Header>\n          </Conditional>\n          <Drawer title={<Link style={{textDecoration: 'none', color: 'black'}} to=\"/\">DreamJob</Link>}>\n          <Conditional if={this.state.loggedIn===true}>\n            <Navigation>\n                <Link to=\"/search\">Search</Link>\n                <Link to=\"/userForm\">Track an Application</Link>\n                <Link to=\"/applications\">My Applications</Link>\n                <Link to=\"/about\">About Us</Link>\n                <Link to=\"/contact\">Contact</Link>\n                <Link to=\"/login\" onClick={this.logout}>Logout</Link>\n            </Navigation>\n          </Conditional>\n          <Conditional if={this.state.loggedIn === false}>\n                <Navigation>\n                <Link to=\"/about\">About Us</Link>\n                <Link to=\"/register\">Register Today</Link>\n                <Link to=\"/login\">Log In</Link>\n                <Link to=\"/about\">Contact</Link>\n              </Navigation>\n            </Conditional>\n          </Drawer>\n        <Content>\n            <div className=\"page-content\" />\n            <Main loggedIn={this.state.loggedIn} />\n        </Content>\n    </Layout>\n</div>\n\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}